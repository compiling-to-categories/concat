# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs 'graphics/concat-graphics.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:

    # - compiler: "ghc-8.10.4"
    #   # env: ALLOW_GOLD_TEST_FAILURES=true
    #   addons: {apt: {packages: [ghc-ppa-tools,cabal-install-3.2,ghc-8.10.4], sources: [hvr-ghc]}}

    # - compiler: "ghc-8.4.4"
    #   # env: ALLOW_GOLD_TEST_FAILURES=true
    #   addons: {apt: {packages: [ghc-ppa-tools,cabal-install-3.0,ghc-8.4.4], sources: [hvr-ghc]}}

    # - compiler: "ghc-8.6.3"
    #   # env: ALLOW_GOLD_TEST_FAILURES=true
    #   addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.6.3], sources: [hvr-ghc]}}

    # - compiler: "ghc-8.4.3"
    #   env: ALLOW_GOLD_TEST_FAILURES=true
    #   addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.4.3], sources: [hvr-ghc]}}

    # - compiler: "ghc-head"
    #   env: GHCHEAD=true ALLOW_GOLD_TEST_FAILURES=true
    #   addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-head],  sources: [hvr-ghc]}}

  allow_failures:
   - compiler: "ghc-head"

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER
  - echo $(pwd)
  - git clone https://github.com/ku-fpg/netlist.git ../netlist-kit-kufp/
  - (cd ../netlist-kit-kufp && git checkout 0f50a9cfd947885cac7fc392a5295cffe0b3ac31)
  - git clone https://github.com/expipiplus1/vector-sized.git ../vector-sized/
  - (cd ../vector-sized && git checkout f80e3ce774d255ee4ba25fcb12a81a76f600e0b0)

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - INSTALLED=${INSTALLED-true}
  - GHCHEAD=${GHCHEAD-false}
  - ALLOW_GOLD_TEST_FAILURES=${ALLOW_GOLD_TEST_FAILURES-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project.local
  - "if $GHCHEAD; then echo 'allow-newer: base, ghc' > cabal.project.local; fi"
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - cat cabal.project || true
  - cat cabal.project.local || true
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
  - rm -rf .ghc.environment.* dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  # - (cd "graphics" && cabal sdist)
  # - mv "graphics"/dist/concat-graphics-*.tar.gz ${DISTDIR}/
  # - cd ${DISTDIR} || false
  # - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  # - "printf 'packages: concat-graphics-*/*.cabal\\n' > cabal.project"
  - cat cabal.project
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # Build with installed constraints for packages in global-db
  # - if $INSTALLED; then echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh; else echo "Not building with installed constraints"; fi

  # build & run tests, build benchmarks
  # - cabal new-build -w ${HC} ${TEST} ${BENCH} concat-hardware concat-graphics concat-examples -v0
  # - cabal new-test  concat-hardware concat-graphics concat-examples --ghc-options='-v0' -v0
  # - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

  # check that selected tests can be built and run
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-build -w ${HC} misc-examples graphics-examples hardware-examples; fi
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-build -w ${HC} gold-tests; fi
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} gold-tests || $ALLOW_GOLD_TEST_FAILURES; fi

  # cabal check
  # - (cd concat-graphics-* && cabal check)

  # haddock
  # - rm -rf ./dist-newstyle
  # - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

# REGENDATA ["graphics/concat-graphics.cabal"]
# EOF
